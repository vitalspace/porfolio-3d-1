---
import Index from "../components/index.svelte";
---

<script>
  import {
    Project,
    Scene3D,
    PhysicsLoader,
    THREE,
    ExtendedObject3D,
  } from "enable3d";
  class MainScene extends Scene3D {
    box: any;
    ufo: ExtendedObject3D = new ExtendedObject3D();
    point!: THREE.PointLight;
    constructor() {
      //@ts-ignore
      super("MainScene");
    }

    init() {
      console.log("Init");
      this.renderer.setPixelRatio(1);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
    }

    async preload() {
      console.log("Preload");
      await this.load.preload("desktop", "/assets/desktop.glb");
    }

    async create() {
      console.log("create");
      // Resize window.
      const resize = () => {
        const newWidth = window.innerWidth;
        const newHeight = window.innerHeight;
        this.renderer.setSize(newWidth, newHeight);
        // @ts-ignore
        this.camera.aspect = newWidth / newHeight;
        this.camera.updateProjectionMatrix();
      };

      window.onresize = resize;
      resize();

      this.camera.position.set(2, 2.5, -6.77);
      this.camera.far = 1000;
      this.camera.rotation.set(-167.04, 50, 170);
      this.camera.near = 0.01;

      // set up scene (light, ground, grid, sky, orbitControls)
      await this.warpSpeed(
        "-ground",
        "-light",
        "-sky",
        "-orbitControls",
        "-camera"
      );

      // enable physics debug
      this.physics.debug?.enable();

      const addDekstop = async () => {
        const object = await this.load.gltf("desktop");
        const scene = object.scenes[0];

        const desktop = new ExtendedObject3D();
        desktop.add(scene);
        this.add.existing(desktop);

        desktop.traverse((child) => {
          if (child.isMesh) {
            child.castShadow = child.receiveShadow = true;
            if (child.name == "ufo") this.ufo = child;
          }
        });
      };

      addDekstop();

      this.point = this.lights.pointLight({
        color: 0xffffff,
        intensity: 2,
        decay: 2,
      });
      this.point.position.set(0, 2.5, 0.5);
      // this.lights.helper.pointLightHelper(this.point);
      this.point.shadow.bias = 0.0;
      this.point.shadow.normalBias = 0.02;
    }

    update() {
      if (this.ufo) {
        const initialY = 0.7; // Posición inicial en el eje Y
        const amplitude = 0.2;
        const time = Date.now() * 0.001; // Obtener el tiempo actual en segundos
        const deltaY = Math.sin(time) * amplitude; // Calcular el cambio en el eje Y usando la función seno
        this.ufo.position.y = initialY + deltaY;
        this.ufo.rotation.z += 0.01;
      }
    }
  }

  PhysicsLoader(
    "lib/ammo/kripken",
    () => new Project({ scenes: [MainScene], antialias: true, alpha: true })
  );
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="./favicon.svg" />
    <title>Enable3d Ammojs Astro Example.</title>
  </head>
  <body class="bg-black">
    <Index client:only />
  </body>
</html>
